<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.BO.MaterialQueue</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.MaterialQueue">
            <summary>
            Client side business object for MaterialQueue.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.Proxy.MaterialQueueImpl">
             <summary>
             Here are some brief notes regarding how to accomplish in Sonoma
             the features found in the v6.10 Vantage program Material Request Queue.
            
             1) The three tab folders each show Material Queue (MtlQueue) records.
             1a) The Unselected tab dataset rows can be obtained with a call to
             MaterialQueue.GetRows(), whereClauseMtlQueue = 'ttMtlQueue.SelectedByEmpID = ""'
            
             1b) The My Selections tab dataset rows can be obtained with a call to
             MaterialQueue.GetRows(), whereClauseMtlQueue = 'ttMtlQueue.SelectedByEmpID = {currentEmpId}'
            
             1c) The Others Selections tab dataset rows can be obtained with a call to
             MaterialQueue.GetRows(), whereClauseMtlQueue = 'ttMtlQueue.SelectedByEmpID &lt; &gt; ""
             and ttMtlQueue.SelectedByEmpID &lt; &gt; {currentEmpId}'
             2) The Select button should merely write the currentEmpId into ttMtlQueue.SelectedByEmpID
             and then call MaterialQueue.Update().
            
             3) The Deselect button should merely clear the ttMtlQueue.SelectedByEmpID and
             then call MaterialQueue.Update().
            
             4) The Delete button should merely call MaterialQueue.DeleteById().
            
             5) The button with the bar-code image on it should call the MtlTag print routine.
             I don't know what object and method(s) are involved, but there are many examples
             throughout Sonoma.
            
             6) The Process button is more complicated. First, check the value of
             ttMtlQueue.OkToProcess. If that is false, disable the button.
             Otherwise, you will need to look to ttMtlQueue.TranType to determine what
             application to pop up for user entry:
             When ttMtlQueue.TranType is MFG-STK, MFG-WIP or SVG-STK, you need to run
             the Receipts From Manufacturing program.
             When ttMtlQueue.TranType is anything else, you need to run
             the Move Material program.
             I think there is substantial work involved in setting up these calls--they
             each use different datasets.
             </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.#ctor(Epicor.Mfg.Core.BLConnectionPool)">
            <summary>
            Proxy constructor
            </summary>
            <param name="connPool">Connection pool</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.GetNewMtlQueue(Epicor.Mfg.BO.MaterialQueueDataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.DeleteByID(System.Int32)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.GetByID(System.Int32)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.GetRows(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.Update(Epicor.Mfg.BO.MaterialQueueDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.UpdateExt(Epicor.Mfg.BO.UpdExtMaterialQueueDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.AutoSelectTransactions(System.String)">
            <summary>
            Retrieve material queue entry by company and by employee.
            </summary>
            <param name="ipEmpID">Employee ID</param>
            <returns>The MaterialQueue Data Set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.GetMtlQueueByTranID(System.String)">
            <summary>
            Retrieve material queue entry by company and by mtlQueueSeq.
            </summary>
            <param name="ipMtlQueueSeq">Material Queue Sequence</param>
            <returns>The MaterialQueue Data Set</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.LockUnLockMtlQueForEmpID(System.String,System.Int32,System.String,Epicor.Mfg.BO.MaterialQueueDataSet)">
            <param name="ipTranStatus">Transaction status</param>
            <param name="ipMtlQueueSeq">Material Queue Sequence</param>
            <param name="ipEmpID">Employee ID</param>
            <param name="ds" type="Epicor.Mfg.BO.MaterialQueueDataSet">The MaterialQueueDataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.LockUnLockMtlQue(System.String,System.Int32,Epicor.Mfg.BO.MaterialQueueDataSet)">
            <param name="ipTranStatus">Transaction status</param>
            <param name="ipMtlQueueSeq">Material Queue Sequence</param>
            <param name="ds" type="Epicor.Mfg.BO.MaterialQueueDataSet">The MaterialQueueDataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.UnlockAutoSelectTransactions(System.String)">
            <summary>
            UnLockAutoSelectTransactions.
            </summary>
            <param name="ipEmpID">Employee ID</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.MaterialQueueImpl.SortQueueByPriority">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="P:Epicor.Mfg.Proxy.MaterialQueueImpl.CallContext">
            <summary>
            Call context dataset
            </summary>
        </member>
        <member name="M:Epicor.Mfg.BO.MaterialQueue.#ctor(Epicor.Mfg.Core.BLConnectionPool)">
            <summary>
            Constructor
            </summary>
            <param name="connPool">Connection pool</param>
        </member>
    </members>
</doc>
